// Code generated by MockGen. DO NOT EDIT.
// Source: router/consul.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	api "github.com/hashicorp/consul/api"
	reflect "reflect"
)

// MockConsulCatalog is a mock of ConsulCatalog interface
type MockConsulCatalog struct {
	ctrl     *gomock.Controller
	recorder *MockConsulCatalogMockRecorder
}

// MockConsulCatalogMockRecorder is the mock recorder for MockConsulCatalog
type MockConsulCatalogMockRecorder struct {
	mock *MockConsulCatalog
}

// NewMockConsulCatalog creates a new mock instance
func NewMockConsulCatalog(ctrl *gomock.Controller) *MockConsulCatalog {
	mock := &MockConsulCatalog{ctrl: ctrl}
	mock.recorder = &MockConsulCatalogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConsulCatalog) EXPECT() *MockConsulCatalogMockRecorder {
	return m.recorder
}

// Service mocks base method
func (m *MockConsulCatalog) Service(service, tag string, q *api.QueryOptions) ([]*api.CatalogService, *api.QueryMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Service", service, tag, q)
	ret0, _ := ret[0].([]*api.CatalogService)
	ret1, _ := ret[1].(*api.QueryMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Service indicates an expected call of Service
func (mr *MockConsulCatalogMockRecorder) Service(service, tag, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockConsulCatalog)(nil).Service), service, tag, q)
}
