// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vwidjaya/barito-proto/producer (interfaces: ProducerClient)

package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	producer "github.com/vwidjaya/barito-proto/producer"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockProducerClient is a mock of ProducerClient interface
type MockProducerClient struct {
	ctrl     *gomock.Controller
	recorder *MockProducerClientMockRecorder
}

// MockProducerClientMockRecorder is the mock recorder for MockProducerClient
type MockProducerClientMockRecorder struct {
	mock *MockProducerClient
}

// NewMockProducerClient creates a new mock instance
func NewMockProducerClient(ctrl *gomock.Controller) *MockProducerClient {
	mock := &MockProducerClient{ctrl: ctrl}
	mock.recorder = &MockProducerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProducerClient) EXPECT() *MockProducerClientMockRecorder {
	return m.recorder
}

// Produce mocks base method
func (m *MockProducerClient) Produce(arg0 context.Context, arg1 *producer.Timber, arg2 ...grpc.CallOption) (*producer.ProduceResult, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Produce", varargs...)
	ret0, _ := ret[0].(*producer.ProduceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Produce indicates an expected call of Produce
func (mr *MockProducerClientMockRecorder) Produce(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockProducerClient)(nil).Produce), varargs...)
}

// ProduceBatch mocks base method
func (m *MockProducerClient) ProduceBatch(arg0 context.Context, arg1 *producer.TimberCollection, arg2 ...grpc.CallOption) (*producer.ProduceResult, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProduceBatch", varargs...)
	ret0, _ := ret[0].(*producer.ProduceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProduceBatch indicates an expected call of ProduceBatch
func (mr *MockProducerClientMockRecorder) ProduceBatch(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceBatch", reflect.TypeOf((*MockProducerClient)(nil).ProduceBatch), varargs...)
}
